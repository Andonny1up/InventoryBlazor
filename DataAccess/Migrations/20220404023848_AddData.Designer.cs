// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(InventaryContext))]
    [Migration("20220404023848_AddData")]
    partial class AddData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.CategoryEntity", b =>
                {
                    b.Property<string>("categoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("categoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            categoryId = "ASH",
                            categoryName = "Aseo Hogar"
                        },
                        new
                        {
                            categoryId = "ASP",
                            categoryName = "Aseo Personal"
                        },
                        new
                        {
                            categoryId = "HGR",
                            categoryName = "Hogar"
                        },
                        new
                        {
                            categoryId = "SLD",
                            categoryName = "Salud"
                        });
                });

            modelBuilder.Entity("Entities.InOutEntity", b =>
                {
                    b.Property<string>("inOutId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("inOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isInput")
                        .HasColumnType("bit");

                    b.Property<string>("storagestoregeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("storegeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("inOutId");

                    b.HasIndex("storagestoregeId");

                    b.ToTable("inOuts");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Property<string>("productId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("totalQuantity")
                        .HasColumnType("int");

                    b.HasKey("productId");

                    b.HasIndex("categoryId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Property<string>("storegeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("lastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("partialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("warehouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("storegeId");

                    b.HasIndex("productId");

                    b.HasIndex("warehouseId");

                    b.ToTable("storages");
                });

            modelBuilder.Entity("Entities.WarehouseEntity", b =>
                {
                    b.Property<string>("warehouseId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("warehouseAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("warehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("warehouseId");

                    b.ToTable("warehouses");

                    b.HasData(
                        new
                        {
                            warehouseId = "c7f6d9ab-7df8-43c1-aa56-b0178b278bfe",
                            warehouseAddress = "Calle 8 con 23",
                            warehouseName = "Bodega Central"
                        },
                        new
                        {
                            warehouseId = "a1e46b78-a78d-4ed8-b181-bef446d86252",
                            warehouseAddress = "Calle sur con este",
                            warehouseName = "Bodega Sur"
                        },
                        new
                        {
                            warehouseId = "4219cb30-65a4-4514-a62f-57e3b51caed2",
                            warehouseAddress = "Calle Norte con oriente",
                            warehouseName = "Bodega Norte"
                        });
                });

            modelBuilder.Entity("Entities.InOutEntity", b =>
                {
                    b.HasOne("Entities.StorageEntity", "storage")
                        .WithMany("inOuts")
                        .HasForeignKey("storagestoregeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("storage");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.HasOne("Entities.CategoryEntity", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.HasOne("Entities.ProductEntity", "product")
                        .WithMany("storages")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.WarehouseEntity", "warehouse")
                        .WithMany("storages")
                        .HasForeignKey("warehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("Entities.CategoryEntity", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Navigation("storages");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Navigation("inOuts");
                });

            modelBuilder.Entity("Entities.WarehouseEntity", b =>
                {
                    b.Navigation("storages");
                });
#pragma warning restore 612, 618
        }
    }
}
